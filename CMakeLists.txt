project(minc-toolkit)
cmake_minimum_required(VERSION 2.6)

SET(MINK_TOOLKIT_PACKAGE_VERSION_MAJOR 0)
SET(MINK_TOOLKIT_PACKAGE_VERSION_MINOR 1)
SET(MINK_TOOLKIT_PACKAGE_VERSION_PATCH 0)

SET(CPACK_GENERATOR DEB)

SET(CPACK_PACKAGE_VERSION_MAJOR ${MINK_TOOLKIT_PACKAGE_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${MINK_TOOLKIT_PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${MINK_TOOLKIT_PACKAGE_VERSION_PATCH})
SET(CPACK_PACKAGE_CONTACT "vladmir.fonov@gmail.com")

INCLUDE(CPack)


# register local modules
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/cmake-modules")


# default install directories
SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR} CACHE PATH "Install path prefix, prepended onto install directories.")

# superbuild options
OPTION(USE_SYSTEM_ZLIB   "Use System ZLIB " ON)
OPTION(USE_SYSTEM_NETCDF "Use System NETCDF > 3.6.3" ON)
OPTION(USE_SYSTEM_HDF5   "Use System HDF5 > 1.8"     ON)
OPTION(USE_SYSTEM_NETPBM "Use System NETPBM > 10.35" ON)
OPTION(USE_SYSTEM_PCRE   "Use System PCRE " ON)
OPTION(USE_SYSTEM_PCREPP "Use System PCRE++" ON)
OPTION(USE_SYSTEM_GSL    "Use System GSL " ON)
OPTION(USE_SYSTEM_FFTW3F "Use System FFTW3F " ON)


# for superbuild
IF(USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_NETPBM AND USE_SYSTEM_PCRE AND USE_SYSTEM_PCREPP AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F)
# DO nothing?
ELSE(USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_NETPBM AND USE_SYSTEM_PCRE AND USE_SYSTEM_PCREPP AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F)
  INCLUDE(ExternalProject)
ENDIF(USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_NETPBM AND USE_SYSTEM_PCRE AND USE_SYSTEM_PCREPP AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F)
  

# required packages
FIND_PACKAGE( Perl   REQUIRED )
# required for minc
IF(USE_SYSTEM_ZLIB)
  FIND_PACKAGE( ZLIB   REQUIRED )
ELSE(USE_SYSTEM_ZLIB)
  INCLUDE(BuildZLIB)
  build_zlib( ${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_ZLIB)

IF(USE_SYSTEM_NETCDF)
  FIND_PACKAGE( NETCDF REQUIRED )
ELSE(USE_SYSTEM_NETCDF)
  INCLUDE(BuildNETCDF)
  build_netcdf( ${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_NETCDF)

IF(USE_SYSTEM_HDF5)
  FIND_PACKAGE( HDF5   REQUIRED )
ELSE(USE_SYSTEM_HDF5)
  INCLUDE(BuildHDF5)
  build_hdf5( ${CMAKE_INSTALL_PREFIX} ${ZLIB_INCLUDE_DIR} ${ZLIB_LIBRARY})
  IF(NOT USE_SYSTEM_ZLIB)
    add_dependencies(HDF5 ZLIB)
  ENDIF(NOT USE_SYSTEM_ZLIB)
ENDIF(USE_SYSTEM_HDF5)

#required for some minc tools
FIND_PACKAGE( BISON )
FIND_PACKAGE( FLEX )

#required for bicpl
IF(USE_SYSTEM_NETPBM)
  FIND_PACKAGE( NETPBM QUIET )
ELSE(USE_SYSTEM_NETPBM)
  INCLUDE(BuildNETPBM)
  build_netpbm( ${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_NETPBM)

#required for oobicpl
IF(USE_SYSTEM_PCRE)
  FIND_PACKAGE( PCRE QUIET )
ELSE(USE_SYSTEM_PCRE)
  INCLUDE(BuildPCRE)
  build_pcre(${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_PCRE)

IF(USE_SYSTEM_PCREPP)
  FIND_PACKAGE( PCRE++ QUIET )
ELSE(USE_SYSTEM_PCREPP)
  INCLUDE(BuildPCREPP)
  build_pcrepp(${CMAKE_INSTALL_PREFIX} ${PCRE_INCLUDE_DIR} ${PCRE_LIBRARY})
  
  IF(NOT USE_SYSTEM_PCRE)
    add_dependencies(PCREPP PCRE)
  ENDIF(NOT USE_SYSTEM_PCRE)
ENDIF(USE_SYSTEM_PCREPP)

#required for EZminc
IF(USE_SYSTEM_GSL)
  FIND_PACKAGE(GSL)
ELSE(USE_SYSTEM_GSL)  
  INCLUDE(BuildGSL)
  build_gsl(${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_GSL)

IF(USE_SYSTEM_FFTW3F)
  FIND_PACKAGE(FFTW3F)
ELSE(USE_SYSTEM_FFTW3)
  INCLUDE(BuildFFTW3F)
  build_fftw3f(${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_FFTW3F)
#TODO add dependencies, so that external libraries are built before everything else

#required for minc4itk & EZminc
#FIND_PACKAGE(ITK QUIET)

#required for ray_trace
FIND_PACKAGE( Threads QUIET)
FIND_PACKAGE( GLUT QUIET )

SET(MINC_TOOLKIT_BUILD ON)
SET(MINC_TOOLKIT_BUILD_DIR ${CMAKE_BINARY_DIR})
SET(MINC_TOOLKIT_INSTALL_DIR ${CMAKE_INSTALL_PREFIX})

#setup parameters
SET(BUILD_MINCNLM CACHE INTERNAL ON)
SET(BUILD_DISTORTION_CORRECTION CACHE INTERNAL ON)
SET(BUILD_MRFSEG CACHE INTERNAL ON)
SET(BUILD_DD CACHE INTERNAL ON)
SET(BUILD_EZMINC_TOOLS CACHE INTERNAL ON)

ADD_SUBDIRECTORY(minc)

IF(NOT USE_SYSTEM_NETCDF)
  ADD_DEPENDENCIES(minc2 NETCDF)
ENDIF(NOT USE_SYSTEM_NETCDF)

IF(NOT USE_SYSTEM_HDF5)
  ADD_DEPENDENCIES(minc2 HDF5)
ENDIF(NOT USE_SYSTEM_HDF5)


SET(MINC2_USE_FILE ${CMAKE_BINARY_DIR}/minc/UseMINC2.cmake CACHE INTERNAL "MINC2 use file")
INCLUDE(${CMAKE_BINARY_DIR}/minc/MINC2Config.cmake)
INCLUDE(${MINC2_USE_FILE})

ADD_SUBDIRECTORY(EBTKS)
SET(EBTKS_USE_FILE ${CMAKE_BINARY_DIR}/EBTKS/UseEBTKS.cmake CACHE INTERNAL "EBTKS use file")
INCLUDE(${CMAKE_BINARY_DIR}/EBTKS/EBTKSConfig.cmake)
INCLUDE(${EBTKS_USE_FILE})

ADD_SUBDIRECTORY(bicpl)
SET(BICPL_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseBICPL.cmake CACHE INTERNAL "BICPL use file")
INCLUDE(${CMAKE_BINARY_DIR}/bicpl/BICPLConfig.cmake)
INCLUDE(${BICPL_USE_FILE})
IF(NOT USE_SYSTEM_NETPBM)
  ADD_DEPENDENCIES(bicpl NETPBM)
ENDIF(NOT USE_SYSTEM_NETPBM)
  
ADD_SUBDIRECTORY(arguments)
SET(ARGUMENTS_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseARGUMENTS.cmake CACHE INTERNAL "ARGUMENTS use file")
INCLUDE(${CMAKE_BINARY_DIR}/arguments/ARGUMENTSConfig.cmake)
INCLUDE(${ARGUMENTS_USE_FILE})

ADD_SUBDIRECTORY(oobicpl)
SET(OOBICPL_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseOOBICPL.cmake CACHE INTERNAL "OOBICPL use file")
INCLUDE(${CMAKE_BINARY_DIR}/oobicpl/OOBICPLConfig.cmake)
INCLUDE(${OOBICPL_USE_FILE})

IF(NOT USE_SYSTEM_PCREPP)
  ADD_DEPENDENCIES(oobicpl PCREPP)
ENDIF(NOT USE_SYSTEM_PCREPP)

ADD_SUBDIRECTORY(conglomerate)
ADD_SUBDIRECTORY(EZminc)
IF(NOT USE_SYSTEM_FFTW3F)
  ADD_DEPENDENCIES(minc_image_proc FFTW3F)
ENDIF(NOT USE_SYSTEM_FFTW3F)
  
IF(NOT USE_SYSTEM_GSL)
  ADD_DEPENDENCIES(minc_image_proc GSL)
ENDIF(NOT USE_SYSTEM_GSL)

ADD_SUBDIRECTORY(classify)
ADD_SUBDIRECTORY(N3)
ADD_SUBDIRECTORY(glim_image)
ADD_SUBDIRECTORY(mni_autoreg)
ADD_SUBDIRECTORY(inormalize)
ADD_SUBDIRECTORY(ray_trace)
