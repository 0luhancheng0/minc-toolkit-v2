project(minc-toolkit)
enable_language(C)
enable_language(CXX)

cmake_minimum_required(VERSION 2.6)

SET(MINC_TOOLKIT_PACKAGE_VERSION_MAJOR 0)
SET(MINC_TOOLKIT_PACKAGE_VERSION_MINOR 2)
SET(MINC_TOOLKIT_PACKAGE_VERSION_PATCH 0)
SET(MINC_TOOLKIT_RELEASE_DATE "20120403")

SET(MINC_TOOLKIT_VERSION_FULL "${MINC_TOOLKIT_PACKAGE_VERSION_MAJOR}.${MINC_TOOLKIT_PACKAGE_VERSION_MINOR}.${MINC_TOOLKIT_PACKAGE_VERSION_PATCH}-${MINC_TOOLKIT_RELEASE_DATE}")

#SET(CPACK_GENERATOR DEB)
SET(CPACK_PACKAGE_NAME "minc-toolkit")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "minc image processing toolki")
SET(CPACK_PACKAGE_VENDOR "Brain Imaging Center, Montreal Neurological Institute,McGill University")
SET(CPACK_PACKAGE_VERSION_MAJOR ${MINC_TOOLKIT_PACKAGE_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${MINC_TOOLKIT_PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${MINC_TOOLKIT_PACKAGE_VERSION_PATCH})
SET(CPACK_PACKAGE_CONTACT "Vladimir Fonov <vladmir.fonov@gmail.com>")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "itksnap-${MINC_TOOLKIT_VERSION_FULL}")
SET(CPACK_MONOLITHIC_INSTALL ON)
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING")

 
IF(UNIX AND NOT APPLE)

ENDIF(UNIX AND NOT APPLE)

INCLUDE(CPack)

IF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")
  EXEC_PROGRAM(uname ARGS "-m" OUTPUT_VARIABLE CMAKE_SYSTEM_PROCESSOR)
ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")
IF(NOT DEFINED CPACK_SYSTEM_NAME)
  SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)
IF(${CPACK_SYSTEM_NAME} MATCHES Windows)
  IF(CMAKE_CL_64)
    SET(CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
  ELSE(CMAKE_CL_64)
    SET(CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF(CMAKE_CL_64)
ENDIF(${CPACK_SYSTEM_NAME} MATCHES Windows)

# For Apple, we need to base the filename on the architecture
IF(CMAKE_SYSTEM_NAME MATCHES Darwin)
  STRING(REPLACE ";" "-" ARCHBIT ${CMAKE_OSX_ARCHITECTURES})
  SET(CPACK_SYSTEM_NAME "MacOS-${ARCHBIT}")
ENDIF(CMAKE_SYSTEM_NAME MATCHES Darwin)

IF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
  SET(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")
ENDIF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)


# register local modules
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/cmake-modules")
INCLUDE(PreventInSourceBuilds)
AssureOutOfSourceBuilds(minc-toolkit)

# default install directories
SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR} CACHE PATH "Install path prefix, prepended onto install directories.")
SET(CPACK_SET_DESTDIR    ${CMAKE_INSTALL_PREFIX})
SET(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET(CPACK_STRIP_FILES ON)

# superbuild options
OPTION(MT_BUILD_SHARED_LIBS "Build shared libraries." OFF)
OPTION(USE_SYSTEM_ZLIB   "Use System ZLIB "       OFF)
OPTION(USE_SYSTEM_NETCDF "Use System NETCDF > 3.6.3" OFF)
OPTION(USE_SYSTEM_HDF5   "Use System HDF5 > 1.8"     OFF)
#OPTION(USE_SYSTEM_NETPBM "Use System NETPBM > 10.35" ON)
OPTION(USE_SYSTEM_PCRE   "Use System PCRE "       OFF)
# OPTION(USE_SYSTEM_PCREPP "Use System PCRE++"  ON)
OPTION(USE_SYSTEM_GSL    "Use System GSL "        OFF)
OPTION(USE_SYSTEM_FFTW3F "Use System FFTW3F "     OFF)
OPTION(BUILD_ITK_TOOLS   "Build ITK-based tools"  OFF)

IF(BUILD_ITK_TOOLS)
  OPTION(USE_SYSTEM_ITK    "Use System ITK" OFF)
ENDIF(BUILD_ITK_TOOLS)

# for superbuild
IF(USE_SYSTEM_ZLIB AND USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_PCRE  AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F AND USE_SYSTEM_ITK)
  SET(USE_SUPERBUILD OFF)
ELSE(USE_SYSTEM_ZLIB AND USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_PCRE AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F AND USE_SYSTEM_ITK)
  INCLUDE(ExternalProject)
  SET(USE_SUPERBUILD ON)
  INCLUDE(ConfigureExternalProjects)
ENDIF(USE_SYSTEM_ZLIB AND USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_PCRE  AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F AND USE_SYSTEM_ITK)

# required packages
FIND_PACKAGE( Perl   REQUIRED )
# required for minc
IF(USE_SYSTEM_ZLIB)
  FIND_PACKAGE( ZLIB   REQUIRED )
ELSE(USE_SYSTEM_ZLIB)
  INCLUDE(BuildZLIB)
  build_zlib( ${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_ZLIB)

IF(USE_SYSTEM_NETCDF)
  FIND_PACKAGE( NETCDF REQUIRED )
ELSE(USE_SYSTEM_NETCDF)
  INCLUDE(BuildNETCDF)
  build_netcdf( ${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_NETCDF)

IF(USE_SYSTEM_HDF5)
  FIND_PACKAGE( HDF5   REQUIRED )
ELSE(USE_SYSTEM_HDF5)
  INCLUDE(BuildHDF5)
  build_hdf5( ${CMAKE_INSTALL_PREFIX} ${ZLIB_INCLUDE_DIR} ${ZLIB_LIBRARY})
  IF(NOT USE_SYSTEM_ZLIB)
    add_dependencies(HDF5 ZLIB)
  ENDIF(NOT USE_SYSTEM_ZLIB)
ENDIF(USE_SYSTEM_HDF5)

#required for some minc tools
FIND_PACKAGE( BISON )
FIND_PACKAGE( FLEX )

#required for bicpl
IF(USE_SYSTEM_NETPBM) # else we will use bundled libppm
  FIND_PACKAGE( NETPBM QUIET )
ENDIF(USE_SYSTEM_NETPBM)

#required for oobicpl
IF(USE_SYSTEM_PCRE)
  FIND_PACKAGE( PCRE QUIET )
ELSE(USE_SYSTEM_PCRE)
  INCLUDE(BuildPCRE)
  build_pcre(${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_PCRE)

# IF(USE_SYSTEM_PCREPP)
#   FIND_PACKAGE( PCRE++ QUIET )
# ELSE(USE_SYSTEM_PCREPP)
#   INCLUDE(BuildPCREPP)
#   build_pcrepp(${CMAKE_INSTALL_PREFIX} ${PCRE_INCLUDE_DIR} ${PCRE_LIBRARY})
#   
#   IF(NOT USE_SYSTEM_PCRE)
#     add_dependencies(PCREPP PCRE)
#   ENDIF(NOT USE_SYSTEM_PCRE)
# ENDIF(USE_SYSTEM_PCREPP)

#required for EZminc
IF(USE_SYSTEM_GSL)
  FIND_PACKAGE(GSL)
ELSE(USE_SYSTEM_GSL)  
  INCLUDE(BuildGSL)
  build_gsl(${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_GSL)

IF(USE_SYSTEM_FFTW3F)
  FIND_PACKAGE(FFTW3F)
ELSE(USE_SYSTEM_FFTW3)
  INCLUDE(BuildFFTW3F)
  build_fftw3f(${CMAKE_INSTALL_PREFIX})
ENDIF(USE_SYSTEM_FFTW3F)
#TODO add dependencies, so that external libraries are built before everything else

IF(BUILD_ITK_TOOLS)
  #required for minc4itk & EZminc
  IF(USE_SYSTEM_ITK)
    FIND_PACKAGE(ITK )
  ELSE(USE_SYSTEM_ITK)
    INCLUDE(BuildITKv3)  
    build_itkv3(${CMAKE_INSTALL_PREFIX})
    INCLUDE(${ITK_DIR}/ITKConfig.cmake)
  ENDIF(USE_SYSTEM_ITK)
ENDIF(BUILD_ITK_TOOLS)

#required for ray_trace
FIND_PACKAGE( Threads QUIET)
FIND_PACKAGE( GLUT QUIET )

SET(MINC_TOOLKIT_BUILD ON)
SET(MINC_TOOLKIT_BUILD_DIR ${CMAKE_BINARY_DIR})
SET(MINC_TOOLKIT_INSTALL_DIR ${CMAKE_INSTALL_PREFIX})

#setup parameters
#MINC2
SET(MINC2_BUILD_V2           ON)
SET(MINC2_BUILD_TOOLS        ON)
SET(MINC2_BUILD_CONVERTERS   ON)
SET(MINC2_BUILD_EZMINC       ON)
SET(MINC2_BUILD_EZMINC_EXAMPLES ON)
SET(MINC2_BUILD_SHARED_LIBS  ${MT_BUILD_SHARED_LIBS})
#EBTKS
SET(EBTKS_BUILD_SHARED_LIBS  ${MT_BUILD_SHARED_LIBS})
#bicpl
SET(BICPL_BUILD_SHARED_LIBS  ${MT_BUILD_SHARED_LIBS})
#oobicpl
SET(OOBICPL_BUILD_SHARED_LIBS  ${MT_BUILD_SHARED_LIBS})
#arguments
SET(ARGUMENTS_BUILD_SHARED_LIBS  ${MT_BUILD_SHARED_LIBS})

#MINC4ITK
SET(HAVE_MINC4ITK  ON)
#EZMINC
SET(EZMINC_BUILD_MINCNLM  ON)
SET(EZMINC_BUILD_DISTORTION_CORRECTION  ON)
SET(EZMINC_BUILD_MRFSEG  ON)
SET(EZMINC_BUILD_DD  ON)
SET(EZMINC_BUILD_TOOLS  ON)

ADD_SUBDIRECTORY(minc)

IF(NOT USE_SYSTEM_NETCDF)
  ADD_DEPENDENCIES(minc2 NETCDF)
ENDIF(NOT USE_SYSTEM_NETCDF)

IF(NOT USE_SYSTEM_HDF5)
  ADD_DEPENDENCIES(minc2 HDF5)
ENDIF(NOT USE_SYSTEM_HDF5)


SET(MINC2_USE_FILE ${CMAKE_BINARY_DIR}/minc/UseMINC2.cmake CACHE INTERNAL "MINC2 use file")
INCLUDE(${CMAKE_BINARY_DIR}/minc/MINC2Config.cmake)
INCLUDE(${MINC2_USE_FILE})

ADD_SUBDIRECTORY(EBTKS)
SET(EBTKS_USE_FILE ${CMAKE_BINARY_DIR}/EBTKS/UseEBTKS.cmake CACHE INTERNAL "EBTKS use file")
INCLUDE(${CMAKE_BINARY_DIR}/EBTKS/EBTKSConfig.cmake)
INCLUDE(${EBTKS_USE_FILE})

ADD_SUBDIRECTORY(bicpl)
SET(BICPL_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseBICPL.cmake CACHE INTERNAL "BICPL use file")
INCLUDE(${CMAKE_BINARY_DIR}/bicpl/BICPLConfig.cmake)
INCLUDE(${BICPL_USE_FILE})
IF(NOT USE_SYSTEM_NETPBM)
  ADD_DEPENDENCIES(bicpl NETPBM)
ENDIF(NOT USE_SYSTEM_NETPBM)
  
ADD_SUBDIRECTORY(arguments)
SET(ARGUMENTS_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseARGUMENTS.cmake CACHE INTERNAL "ARGUMENTS use file")
INCLUDE(${CMAKE_BINARY_DIR}/arguments/ARGUMENTSConfig.cmake)
INCLUDE(${ARGUMENTS_USE_FILE})

ADD_SUBDIRECTORY(oobicpl)
SET(OOBICPL_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseOOBICPL.cmake CACHE INTERNAL "OOBICPL use file")
INCLUDE(${CMAKE_BINARY_DIR}/oobicpl/OOBICPLConfig.cmake)
INCLUDE(${OOBICPL_USE_FILE})

ADD_SUBDIRECTORY(conglomerate)

ADD_SUBDIRECTORY(classify)
ADD_SUBDIRECTORY(N3)
ADD_SUBDIRECTORY(glim_image)
ADD_SUBDIRECTORY(mni_autoreg)
ADD_SUBDIRECTORY(inormalize)
ADD_SUBDIRECTORY(ray_trace)

IF(BUILD_ITK_TOOLS)
  ADD_SUBDIRECTORY(itk-interface)
  SET(MINC4ITK_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/itk-interface/minc4itk/include)
  SET(MINC4ITK_LIBRARY_DIRS ${CMAKE_BINARY_DIR}/itk-interface)
  
  IF(NOT USE_SYSTEM_ITK)
    ADD_DEPENDENCIES(ITKIOMINC ITKv3)
  ENDIF(NOT USE_SYSTEM_ITK)
  
  ADD_SUBDIRECTORY(EZminc)
  IF(NOT USE_SYSTEM_ITK)
    ADD_DEPENDENCIES(ITKIOMINC ITKv3)
  ENDIF(NOT USE_SYSTEM_ITK)
  
  IF(NOT USE_SYSTEM_GSL)
    ADD_DEPENDENCIES(minc_image_proc GSL)
  ENDIF(NOT USE_SYSTEM_GSL)
  
  IF(NOT USE_SYSTEM_FFTW3F)
    ADD_DEPENDENCIES(minc_image_proc FFTW3F)
  ENDIF(NOT USE_SYSTEM_FFTW3F)
ENDIF(BUILD_ITK_TOOLS)

# DO nothing?
IF(USE_SUPERBUILD)
  #install external dependencies to final destination
  INSTALL(DIRECTORY ${CMAKE_BINARY_DIR}/external/${CMAKE_INSTALL_PREFIX}/bin
        DESTINATION .)
  
  INSTALL(DIRECTORY ${CMAKE_BINARY_DIR}/external/${CMAKE_INSTALL_PREFIX}/lib
        DESTINATION .)
  
  INSTALL(DIRECTORY ${CMAKE_BINARY_DIR}/external/${CMAKE_INSTALL_PREFIX}/include
        DESTINATION .)
  
  # do we really need to install share?
  INSTALL(DIRECTORY ${CMAKE_BINARY_DIR}/external/${CMAKE_INSTALL_PREFIX}/share
        DESTINATION .)
  
  
  # dealing with ITKv3
  
ENDIF(USE_SUPERBUILD)


